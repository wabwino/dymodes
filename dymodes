#!/usr/bin/env python3
# - dynamic [usb] mode switch
"""
when ran with '--edit-rules', it edits
usb_modeswitch udev rules so that for the
given modem, switching must henceforth be
automatic
"""

__app__ = "dymodes"
__version__ = "12-dec-2021"
__author__ = "wabwino maliwa"

import glob
import subprocess
import os
import re
import time
import sys
import shutil


UDEV_RULE_FILE = "/lib/udev/rules.d/40-usb_modeswitch.rules"
RULE_STRUCTURE = """# {product} (produced by dymodes)
ATTR{{idVendor}}=="{vid}", ATTR{{idProduct}}=="{pid}", RUN+="usb_modeswitch '/%k'"
"""
CUSTOM_CONFIG_DIR = "/etc/usb_modeswitch.d/"

should_edit_rules = False


def _error_exit(msg):
    exit(msg)


def _process_args(args_schema, args):
    """Do a simple argument processing."""
    if len(args) == 0:
        return
    if len(args) > 1:
        _error_exit("only one argument is expected")
    arg = args[0]
    if arg not in args_schema:
        _error_exit(f"an unknown argument '{arg}'")
    args_schema[arg]['action']()
    if args_schema[arg]['exit']:
        exit()


def _set_edit_rules():
    global should_edit_rules
    should_edit_rules = True


def _check_tool(tool):
    """Check if a given tool is available on the system."""
    return bool(shutil.which(tool))


def print_help():
    print(f"{__app__} - dynamic [usb] mode switch")
    print(f"({__version__} release)")
    print(__doc__.rstrip())


def refresh_rules():
    """Refresh udev rules."""
    subprocess.call(["udevadm", "control", "--reload-rules"])


def is_detected():
    """Check if a modem is detected.  Returns a Boolean."""
    def _check_ports(suffix):
        return glob.glob(f"/dev/tty{suffix}*")
    return bool(_check_ports("USB") or _check_ports("ACM"))


def choose_device():
    """Present a user-menu for selecting a device to work on.

    Returns the chosen device.
    """

    def _get_input(devices):
        print("please select device")
        print("        ---")
        for i in range(len(devices)):
            print(f"  - {i + 1}: {devices[i]['name'].lower()}")
        print()

        while True:
            val = input(": ")
            try:
                val = int(val)
                if val < 1 or val > len(devices):
                    raise ValueError
            except ValueError:
                print("(invalid input. please try again)")
            else:
                return devices[val - 1]

    # - Get list of plugged-in USB devices using `lsusb`.
    output = subprocess.check_output('lsusb').decode('utf-8')
    regexp = r'^(?:[^\s]+\s){5}([0-9a-f]+):([0-9a-f]+)\s(.+)'
    devices = []
    for line in output.strip().split('\n'):
        sre = re.match(regexp, line, re.I)
        if not sre:
            _error_exit("sorry, your system's `lsusb` is producing a strange "
                        "output")
        if not sre.group(3).strip():  # If a device has no name, skip it.
            continue
        devices.append({
            'vid': sre.group(1),
            'pid': sre.group(2),
            'name': sre.group(3)
        })

    return _get_input(devices)


def get_commands(device):
    """Return a list usb_modeswitch's commands that can work the given
    device.  Each command is a dictionary of a command-line argument
    ('cmd') and a raw configuration parameter ('param').

    It puts specific commands for the given device at the beginning
    (that is if we know the device).
    """
    def _entry(param, *args):
        return {
            'param': param,
            'cmd': args
        }

    _cmds = {
        'mobileaction': _entry('MobileActionMode=1', '-A'),
        'qisda':        _entry('QisdaMode=1', '-B'),
        'quanta':       _entry('QuantaMode=1', '-E'),
        'gct':          _entry('GCTMode=1', '-G'),
        'huawei':       [_entry('HuaweiNewMode=1', '-J'),
                         _entry('HuaweiAltMode=1', '-X'),
                         _entry('HuaweiMode=1', '-H')],
        'cisco':        _entry('CiscoMode=1', '-L'),
        'sequans':      _entry('SequansMode=1', '-N'),
        'sony':         _entry('SonyMode=1', '-O'),
        'sierra':       _entry('SierraMode=1', '-S'),
        'option':       _entry('OptionMode=1', '-U'),
        'kobil':        _entry('KobilMode=1', '-T'),
        'blackberry':   _entry('BlackberryMode=1', '-Z'),
        'pantech':      [_entry('PantechMode=1', '-F', '1'),
                         _entry('PantechMode=2', '-F', '2'),
                         _entry('PantechMode=3', '-F', '3'),
                         _entry('PantechMode=4', '-F', '4')],
    }

    cmds = [
        _entry('StandardEject=1', '-K'),
        _entry('DetachStorageOnly=1', '-d')
    ]
    # - Pick command for the chosen modem.
    # NOTE: We have already inserted general commands above (which are a
    # second preference to the vendor-specific ones).
    for k in _cmds.keys():
        if re.search(r' {k}|{k} '.format(k=re.escape(k)), device['name'],
                     re.I):
            cmds = (_cmds[k] if isinstance(_cmds[k], list) else [_cmds[k]]) + cmds
            break

    return cmds


def apply_commands(cmds, vid, pid):
    """Apply given commands.

    It returns a list of parameters of the command that worked.
    """

    def _send_cmds(args):
        print("." * len(args))
        # Only wait if the process exit status is 0.  Any other status
        # isn't a sign of success.
        if subprocess.call(
                ['usb_modeswitch', '-v', vid, '-p', pid] + list(args),
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
        ) == 0:
            for i in range(85):
                time.sleep(0.1)  # 8.5 seconds
                if is_detected():
                    return True

    # NOTE: For each command, we try the command itself.  If that fails,
    # we try it with ResetUSB.
    for c in cmds:
        trials = [
            {
                'args': c['cmd'],
                'params': [c['param']]
            },
            {
                'args': (*c['cmd'], '-R'),
                'params': [c['param'], 'ResetUSB=1']
            }
        ]
        for t in trials:
            if _send_cmds(t['args']):
                return t['params']


def edit_rules(device, params):
    """Add a new rule to usb_modeswitch udev rules and create a custom
    usb_modeswitch config file for the device.

    It backs up the original udev rule file in '~/.dymodes/' just in
    case the editing introduces issues.
    """

    def _make_backup():
        backup_dir = os.path.join(os.path.expanduser(f"~{os.getlogin()}"),
                                  f".{__app__}")
        if not os.path.exists(backup_dir):
            os.mkdir(backup_dir)
        shutil.copy2(UDEV_RULE_FILE, backup_dir)

    # - Create custom config for the modem.
    with open(os.path.join(CUSTOM_CONFIG_DIR,
                           f"{device['vid']}:{device['pid']}"),
              'w') as filo:
        filo.write(f"# {device['name']} (produced by dymodes)")
        filo.write("\n")
        for p in params:
            filo.write(p)
            filo.write("\n")

    # - Add rule to udev rules.
    _make_backup()
    new_rule = RULE_STRUCTURE.format(product=device['name'], vid=device['vid'],
                                     pid=device['pid'])
    _rules = ""
    with open(UDEV_RULE_FILE) as filo:
        _rules = filo.read().rstrip()
    rules = _rules.split("\n")
    rules.insert(-1, new_rule)
    with open(UDEV_RULE_FILE, "w") as filo:
        for line in rules:
            filo.write(line)
            filo.write("\n")
    refresh_rules()


def main(args_schema):
    """Run the whole thing."""
    # - Check given command-line arguments.
    _process_args(args_schema, sys.argv[1:])

    # - Check if modem is already detected.
    if is_detected():
        print("it seems the modem is already detected by the system")
        exit()

    # - Check if machine has required tools.  (We only need the tools
    #   if the modem isn't detected).
    tools = [
        "lsusb",
        "usb_modeswitch",
        "udevadm"
    ]
    for tool in tools:
        if not _check_tool(tool):
            _error_exit(f"`{tool}` is not available on your system. "
                        "please install it first.")

    # - Check if we're root.
    if os.geteuid() != 0:
        _error_exit("please run this program as root")

    # - Get to work.
    device = choose_device()
    print()
    print("getting to work")
    commands = get_commands(device)
    params = apply_commands(commands, device['vid'], device['pid'])
    if params:
        print()
        print("good news! modem state switched")
        if should_edit_rules:
            try:
                edit_rules(device, params)
            except FileNotFoundError:
                print("(but ops! failed to edit rules)")
            else:
                print("(and rules successfully edited)")
    else:
        print()
        print()
        _error_exit("sorry pal, it didn't work")


if __name__ == "__main__":
    # - Configuration of supported arguments.
    args_schema = {
        '--edit-rules': {
            'action': _set_edit_rules,
            'exit': False
        },

        '--help': {
            'action': print_help,
            'exit': True
        }
    }

    try:
        main(args_schema)
    except KeyboardInterrupt:
        print()
